[project]
name = "live-analysis"
version = "1.0.0"
description = "Real-time live stream comment sentiment analysis system"
authors = [
    {name = "DeepSeek Team", email = "dev@deepseek.com"},
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.9",
]

dependencies = [
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.21.0",
    "websockets>=11.0",
    "asyncpg>=0.27.0",
    "aioredis>=2.0.1",
    "deepseek-sdk>=2.4.0",
    "loguru>=0.7.0",
    "python-jose[cryptography]>=3.3.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.10.0",
    "pydantic-settings>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.2.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ipython>=8.12.0",
    "black>=23.3.0",
    "mypy>=1.3.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
]
prod = [
    "gunicorn>=20.1.0",
    "uvloop>=0.17.0",
    "orjson>=3.8.0",
    "prometheus-client>=0.17.0",
]

[project.urls]
Homepage = "https://github.com/deepseek-ai/live-analysis"
Documentation = "https://api.docs.deepseek.com/live-analysis"

[tool.setuptools]
packages = [
    "core",
    "api",
    "config",
    "models",
]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
"core" = ["py.typed", "**/*.jinja2"],
"models" = ["**/*.json", "**/*.bin"],

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.venv
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
known_first_party = ["core", "api", "config"]

[tool.mypy]
strict = true
ignore_missing_imports = true
disallow_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
exclude = [
    "tests/",
    "migrations/",
    "scripts/",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-v --cov=core --cov=api --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["core", "api"]
omit = [
    "**/__init__.py",
    "**/migrations/*",
]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
]
